user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    keepalive_timeout 65;
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Resolver for dynamic upstream resolution
    resolver 127.0.0.11 valid=30s;

    server {
        listen 80;
        server_name _;
        root /usr/share/nginx/html;
        index index.html;

        # Handle Vue.js SPA routing
        location / {
            try_files $uri $uri/ /index.html;
        }

        # Proxy API calls to backend services with dynamic resolution
        # Replace 'auth-service', 'responders-service', 'jobs-service' with your actual service names
        # location /api/auth/ {
        #     set $upstream_auth air-server-auth:3000;
        #     proxy_pass http://$upstream_auth/;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
            
        #     # Handle connection errors gracefully
        #     proxy_intercept_errors on;
        #     error_page 502 503 504 = @fallback;
        # }

        # location /api/responders/ {
        #     set $upstream_responders air-server-responder:3001;
        #     proxy_pass http://$upstream_responders/;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
            
        #     # Handle connection errors gracefully
        #     proxy_intercept_errors on;
        #     error_page 502 503 504 = @fallback;
        # }

        # location /api/jobs/ {
        #     set $upstream_jobs air-server-job-service:3002;
        #     proxy_pass http://$upstream_jobs/;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
            
        #     # Handle connection errors gracefully
        #     proxy_intercept_errors on;
        #     error_page 502 503 504 = @fallback;
        # }

        # Fallback for when backend services are not available
        location @fallback {
            add_header Content-Type application/json;
            return 503 '{"error": "Backend service temporarily unavailable", "message": "Please ensure all backend services are running"}';
        }

        # Static assets caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
